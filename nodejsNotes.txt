nodejs ==>
its is an javascript run time enironmnet built on chrome's v8 javascript engine.
 why nodejs?
////EventDriven &non-blocking I/O model////
///npm is largestecosystem of open
 source libraraies in the world///

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
Creating File using NodeJS==>
const fs=require('fs')
fs.writeFileSync('notes.txt','this file was created by node.js and written by sannith.')
//1st argument is file name and second is data written in it
fs.appendFileSync('notes.txt',' lives in hyderabad. ')

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

importing own Files ==>

in app.js:=>
const mul=require('./utils')
const multi=mul(5,66)
console.log(multi)

in util.js:=>
const mul= function(a,b){
    return a *b
}

module.exports= mul

////////////////////////////////////////////////////////////////////////////////////////////////////

importing NPM modules==>

npm init //creates package.json file
npm i module@version 
ex:=npm i chalk@2.4.1

in app.js:=>
const val=require('validator');
console.log(val.isURL('https/snnithresume.netlify.com'))

///////////////////////////////////////////////////////////////////////////////////////////////////////

Global Npm module and nodemon==>

npm i nodemon  -g
nodemon -v // check version to conformation downloded perfect
nodemon app.js

with this nodemon app refresh automatic ,no need to run node app.js unnecessarly

////////////////////////////////////////////////////////////////////////////////////////////////////////
FileSystem And Command line args==>

getting inputs from users==>
console.log(process.argv)
// it returns array of arguments here 1st two arg are path defined 
and from 3rd it is user defined argment


in app.js:=>
const comand=process.argv[2]
if(command==='add')
{
console.log("notes is added")
}
else if(command==='del')
{
console.log("notes is deleted")
}

in terminal:==>
node app.js add
output:notes is added
node app.js del
output:notes is deleted

node app.js  add --title="Things To Buy"
console.log(process.argv[3])
output:= --title=Things To Buy

//////////////////////////////////////////////////////////////////////////////////////////////////////

Arguments Passing with Yargs==>

npm i yargs
const  yargs=require('yargs')
console.log(yargs.argv)

node app.js  add --title="Things To Buy"
output:{_:['add'],title:'Things To Buy','$0':'app.js'}

//customize yargs version
yargs.version('1.1.0')
node app.js --version
output:=1.1.0

// Create add command
yargs.command({
    command: 'add',
    describe: 'Add a new note',
    handler:function() {
     console.log('adding a new note')
    }
})

node app.js --help
node app.js add
output:=adding a new note

// Create remove command
yargs.command({
    command: 'remove',
    describe: 'Remove a note',
    handler:function( ) {
   console.log('removing a note')
    }
})

node app.js remove
output:=removing a note

// Create list command
yargs.command({
    command: 'list',
    describe: 'List your notes',
    handler:function() {
        console.log('listing out all the notes')
    }
})

node app.js list
output:=listing out all the notes'



// Create read command
yargs.command({
    command: 'read',
    describe: 'Read a Note',
    handler:function() {
        console.log('Reading a notes')
    }
})

node app.js read
output:=Reading a notes

///////////////////////////////////////////////////////////////////////////////////////////////////////

Arguments Passing with Yargs II part==>

// Create add command
yargs.command({
    command: 'add',
    describe: 'Add a new note',
builder:{
title:{
describe:'note title',
demandOption:true,
type:'string'},
body:{
describe:'body',
demandOption:true,
type:'string'}
},
    handler:function() {
     console.log('title is='+argv.title)
console.log('body='+argv.body)

    }
})
yargs.parse( )

node app.js --help
node app.js add --title="my first title"
output:=title is=my first title
node app.js add --title="my first title" --body="this is  body of the app"
output:=title is=my first title
              body=this is  body of the app

//////////////////////////////////////////////////////////////////////////////////////////////////////////

Storing Data with Json==>

in .js file:=>
const laptop={
    brand:'dell',
    ram:'8gb',
    windows:10,
    color:'silver'
}
const laptopJS=JSON.stringify(laptop)
console.log(laptopJS)
const lap=JSON.parse(laptopJS)
console.log(lap.color)
//////////////////////////////////////////////////////////////
creating json file using node:=>

const fs=require('fs')
const laptop={
    brand:'dell',
    ram:'8gb',
    windows:10,
    color:'silver'
}
const laptopJS=JSON.stringify(laptop)
fs.writeFileSync('1-json.json',laptopJS)
/////////////////////////////////////////////////////////////////
reading json file with node:=>

const fs=require('fs')
const dataBuffer=fs.readFileSync('1-json.json')
const dataJson=dataBuffer.toString()
const lap=JSON.parse(dataJson)
console.log(lap.ram)
///////////////////////////////////////////////////////////////////
overriding the data:=>

const dataBuffer=fs.readFileSync('1-json.json')
const dataJson=dataBuffer.toString()
const user=JSON.parse(dataJson)
user.name='sannith'
user.age=24
const userJson=JSON.stringify(user)
fs.writeFileSync('1-json.json',userJson)
//////////////////////////////////////////////////////////////////
Adding Note==>

/////in app.js:=>
const Notes=require('./notes.js')
const yargs=require('yargs')

yargs.command({
    command: 'add',
    describe: 'Add a new note',
    builder:{
        title:{
            describe:'note title',
            demandOption:true,
            type:'string'


        },
         body:{
            describe:'body description',
            demandOption:true,
            type:'string'


        }
    },
    handler:function(argv) {
        Notes.addNotes(argv.title,argv.body)
   

    }
})
yargs.parse()

////in notes.js:=>

const fs=require('fs')
const getNotes= function(){
    return 'your notes'
}
const addNotes=function(title,body){
const notes=loadNotes()
notes.push({
    title:title,
    body:body
})
console.log(notes)
saveNotes(notes)
}
const saveNotes=function(notes){
    const dataJson=JSON.stringify(notes)
    fs.writeFileSync('notes.json',dataJson)

}
const loadNotes=function(){

    try{
        const bufferData=fs.readFileSync('notes.json')
    const dataJson=bufferData.toString()
    return JSON.parse(dataJson)

    }
    catch(e){
        return []

    }
    

}
module.exports={getNotes:getNotes,
addNotes:addNotes}
//////////////////////////////////////////////////////////////////////////////////////////
adding filter to add note===>

if title already it will not add notes

const addNotes=function(title,body){
const notes=loadNotes()
const duplicates=notes.filter(function(note){
    return note.title===title
})
if(duplicates.length===0)
{
    notes.push({
        title:title,
        body:body
    })
    
    saveNotes(notes)
    console.log('new note added succesfully=',notes)
    }
else{
    console.log('note title as already taken')

}
}
////////////////////////////////////////////////////////////////////////////////////
Removing Note==>

//in app.js:=>
const Notes=require('./notes.js')
const yargs=require('yargs')
yargs.command({
    command: 'remove',
    describe: 'remove a new note',
    builder:{
        title:{
            describe:'note title',
            demandOption:true,
            type:'string'


        }
    },
    
    handler:function(argv) {
        Notes.removeNotes(argv.title)
     
   

    }
})
yargs.parse()

in notes.js:=>
const removeNotes=function(title){
    const notes=loadNotes()
    const notesToKeep=notes.filter(function(note){
        return note.title!==title
    })
    if(notes.length>notesToKeep.length){
        console.log(chalk.green.inverse('note removed succesfully'))
    }
    else{
        console.log(chalk.red.inverse(' no note found'))

    }
    saveNotes(notesToKeep)
    

}
/////////////////////////////////////////////////////////////////////////////////////////////////////

 ES5 convert to ES6==>

 const square = function (x) {
     return x * x
 }

 const square = (x) => {
     return x * x
 }

 const square = (x) => x * x

console.log(square(2))

const event = {
    name: 'Birthday Party',
    guestList: ['Andrew', 'Jen', 'Mike'],
    printGuestList() {
        console.log('Guest list for ' + this.name)
        
        this.guestList.forEach((guest) => {
            console.log(guest + ' is attending ' + this.name)
        })
    }
}

event.printGuestList()

///////////////////////////////////////////////////////////////////////////////////////////////////

ListNotes==>

///in app.js:=>
const Notes=require('./notes.js')
const yargs=require('yargs')
yargs.command({
    command: 'listnotes',
    describe: 'list all notes',
    handler:function() {
        Notes.listNotes()
    }
})
yargs.parse()

///in notes.js:=>
const listNotes=()=>{
    const notes=loadNotes()
    console.log(chalk.inverse('your Notes'))
    notes.forEach((note)=>console.log(note.title))
    
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
 overcome addnotes problem==>

const addNotes=function(title,body){
const notes=loadNotes()
const duplicate=notes.find(function(note){  ///replaced filter with find
    return note.title===title
})
if(!duplicate)    ///if(duplicate.length===0)
{
    notes.push({
        title:title,
        body:body
    })
    
    saveNotes(notes)
    console.log(chalk.green.inverse('new note added succesfully='))
    }
else{
    console.log(chalk.red.inverse('note title as already taken'))

}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

ReadNotes==>

///in notes.js:=>
const readNotes=(title)=>{
    const notes=loadNotes()
    const note=notes.find((note)=>note.title===title)
    if(note){
        console.log(chalk.inverse.blue(note.title))
        console.log(chalk.green(note.body))
    }
    else{
        console.log(chalk.red.inverse('note not found'))
    }

}

///in app.js:=>
yargs.command({
    command: 'read',
    describe: 'read a new note',
    builder:{
        title:{
            describe:'note title',
            demandOption:true,
            type:'string'


        }
    },
    
    handler:function(argv) {
     notes.readNotes(argv.title)
   

    }
})
yargs.parse()
//////////////////////////////////////////////////////////////////////////////////////////////////

Asynchronus Basics==>

inapp.js:=>
console.log('start')
setTimeout(()=>{console.log('10 sec timer')},10000)
console.log('end')

output:
start
end
10 sec timer

//call stack
it is an datastructure provided by v8 javaSriptEngine
job of it was keep  tracking execution of program

const namesList=(lists)=>{
    lists.forEach((list)=>console.log(list))
}
const lists=['sannith','santhu','reddy']
namesList(lists) 
// in call stack:->
loads in order:
main()
namesList([.....])
forEach( )
anonymous('sannith')
console.log('sannith')                         output in console:
                                                             1.sannith
main()
namesList([.....])
forEach( )
anonymous('santhu') 
console.log('santhu)  
                                                             output in console:
                                                             1.sannith
                                                             2.santhu
main()
namesList([.....])
forEach( )
anonymous('reddy')
console.log('reddy')
                                                                 output in console:
                                                             1.sannith
                                                             2.santhu
                                                             3.reddy

call stack becomes empty at last
//////////////////////////////////////////////////////////////////////////////////////////////////

NodeApis & EventLoop==>

console.log('start')
setTimeout(()=>{console.log('10 sec timer')},10000)
setTimeout(()=>{console.log('0 sec timer')},0)
console.log('end')
 
in call stack:=>                                in nodeApis:=   
main()                                                    setTimeout(10 sec)
console.log()                                           setTimeout(0 sec)                                  
console.log()

in Event loop:==>
call back queue
  setTimeout(0 sec) 
  setTimeout(10 sec)  

note:=
=>when main() is completed and removed from call stack it is end of synchronous program
=>in asynchronous program after ending of main() in stack its load call back queues
into stack
ie
in call stack:=>
setTimeout(0 sec) 
  setTimeout(10 sec)  
 and final output in console :=>
1.start
2.end
3.0sec timer
4.10sec timer
///////////////////////////////////////////////////////////////////////////////////////////////////////

Https Requests==>

npm  init -y
npm i request

const req=require('request')
const url='http://api.weatherstack.com/current?access_key=6a4269392d394a7edff489df394a6bd0&query=New%20York'
req({url:url},(error,response)=>
                               {const data=JSON.parse(response.body)
                                   console.log(data)
                                 })
////////////////////////////////////////////////////////////////////////////////////////////////////////////
Customize http request==>

const req=require('request')
const url='http://api.weatherstack.com/current?access_key=6a4269392d394a7edff489df394a6bd0&query=New%20York'
req({url:url,json:true},(error,response)=>
                               {
                                   console.log(response.data)
                                 })
///2nd example
const req=require('request')
const url='https://zomatoajulypi.herokuapp.com/location'
req({url:url,json:true},(error,response)=>
                               {const data=response.body
                                   console.log('hi this restaurent is located at'+data[0].location_name+'and state that belongs to'+data[0].state)
                                 })
output:=>
hi this restaurent is located atAshok Vihar Phase 3, New Delhiand state that belongs toDelhi
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Handling Errors==>

const req=require('request')
const url='http://api.weatherstack.com/current?access_key=6a4269392d394a7edff489df394a6bd0&query=New%20York'
req({url:url,json:true},(error,response)=>
                               {
                                   if(error)
                                        {
                                          console.log('unable to connect to url')
                                          } 
                                else if(response.body.error)
                                        {
                                         console.log('unable to find location please check input arguments')
                                           }
                                   else{
                                   console.log(response.data)
                                    }
                                 })

//y example 2: geocode:=>
 
const req=require('request')
const url='geocodeurl of mapbox'
req({url:url,json:true},(error,response)=>
                               {
                                   if(error)
                                        {
                                          console.log('unable to connect to url')
                                          } 
                                else if(response.body.features.length===0)
                                        {
                                         console.log('unable to find location please check input arguments')
                                           }
                                   else{
                                   const longitude=(response.body.features[0].center[0])
                                    const latitude=(response.body.features[0].center[1])
                                    console.log (longitude,latitude)
                                    }
                                 })
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

call back function:==>

const greet=(address,callback)=>{

        const data={lat:1231,lng:5454}
        return data 
    
}
const data=greet('goodmorning')
console.log(data)

output:=>
{ lat: 1231, lng: 5454 }  //// but this synchronus method

//y
const greet=(address,callback)=>{
    setTimeout(()=>{
        const data={lat:1231,lng:5454}
        return data 
    },2000)
}
const data=greet('goodmorning')
console.log(data)

output:=>
undefiened

///to over come this call back functions comes into pitcure

const greet=(address,callback)=>{
    setTimeout(()=>{
        const data={lat:1231,lng:5454}
        callback(data) 
    },2000)
}
greet('goodmorning',(output)=>{console.log('output') })
output:=>
{lat:1231,lng:5454}


const add=(a,b,callback)=>{
    setTimeout(()=>callback(a+b),5000)
}
add(45,46,(add)=>console.log(add))
output:=>
91
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
call back absrtraction:=>>

create utils folder and init creae geocode.js file:=>

const request=require('request')
const geocode = (address, callback) => {
    const url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/' + address + '.json?access_token=pk.eyJ1IjoiYW5kcmV3bWVhZDEiLCJhIjoiY2pvOG8ybW90MDFhazNxcnJ4OTYydzJlOSJ9.njY7HvaalLEVhEOIghPTlw&limit=1'

    request({ url, json: true }, (error, { body }) => {
        if (error) {
            callback('Unable to connect to location services!', undefined)
        } else if (body.features.length === 0) {
            callback('Unable to find location. Try another search.', undefined)
        } else {
            callback(undefined, {
                latitude: body.features[0].center[1],
                longitude: body.features[0].center[0],
                location: body.features[0].place_name
            })
        }
    })
}
module.exports = geocode


//in app.js:=>

const geocode = require('./utils/geocode')
geocode('New York',(error,data)=>{
console.log('ERROR  is',error)
console.log('DATA is',data)
})

output:==>
ERROR is  undefined
DATA is {
latitude:5564654,
longitude:46545,
location:'New york, 	United States'}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
call back abstraction challange with forecast as similar to geocode

in util in forecast.js=>

const request = require('request')

const forecast = (latitude, longitude, callback) => {
    const url = 'https://api.darksky.net/forecast/9d1465c6f3bb7a6c71944bdd8548d026/' + latitude + ',' + longitude

    request({ url, json: true }, (error, { body }) => {
        if (error) {
            callback('Unable to connect to weather service!', undefined)
        } else if (body.error) {
            callback('Unable to find location', undefined)
        } else {
            callback(undefined, body.daily.data[0].summary + ' It is currently ' + body.currently.temperature + ' degress out. There is a ' + body.currently.precipProbability + '% chance of rain.')
        }
    })
}

module.exports = forecast

inapp.js:=>

geocode('New York', (error,data) => {
    if (error) {
        return console.log(error)
    }

    forecast(latitude, longitude, (error, forecastData) => {
        if (error) {
            return console.log(error)
        }

        console.log(location)
        console.log(forecastData)
    })
})

output:=>

New York
Partly cloudy It is currently  39.67 degress out. There is a 0 % chance of rain
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Accesing command line arg with yargs==>

const geocode = require('./utils/geocode')
const forecast = require('./utils/forecast')

const address = process.argv[2]

if (!address) {
    console.log('Please provide an address')
} else {
    geocode(address, (error, { latitude, longitude, location }) => {
        if (error) {
            return console.log(error)
        }

        forecast(latitude, longitude, (error, forecastData) => {
            if (error) {
                return console.log(error)
            }

            console.log(location)
            console.log(forecastData)
        })
    })
}


OUTPUT:=>
in console
node app.js  "New york"
New York
Partly cloudy It is currently  39.67 degress out. There is a 0 % chance of rains
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Short Hand And Destructuring==>

const name='sannith'
const age=24
const user={
    name:name,
    age:age,
    location:'hyderabad'
}
console.log('user data is ',user)

output:=>
user data is  { name: 'sannith', age: 24, location: 'hyderabad' }

const name='sannith'
const age=24
const user={
    name,
    age,
    location:'hyderabad'
}
console.log('user data is ',user)

output:=> //same output
user data is  { name: 'sannith', age: 24, location: 'hyderabad' }

//object destructuring=>

const movie={
    hero:'prabhas',
    heroine:'anushks',
    director:'rajamouli',
    budget:100000000

}
const hero=movie.hero  ////destructure object
console.log(hero)
console.log('hero name is',movie.hero)


//ly
const {hero,heroine,director,budget}= movie
console.log('hero name is',hero)

const {hero:heroname,heroine,director,budget}= movie
console.log('hero name is',heroname)

const {hero:heroname,heroine,director,budget=500000000}= movie //updated
console.log('movie budget is',budget)


const movie={
    hero:'prabhas',
    heroine:'anushks',
    director:'rajamouli',
    budget:100000000

}


const transaction=(type,{hero,director,budget})=>{
    console.log(type,hero,director,budget)
}
transaction('industry',movie)
output:=>
industry prabhas rajamouli 100000000s
///////////////////////////////////////////////////////////////////////////////////////////////////
destructuring complete weather app:==>

in app.js:=>

const geocode = require('./utils/geocode')
const forecast = require('./utils/forecast')

const address = process.argv[2]

if (!address) {
    console.log('Please provide an address')
} else {
    geocode(address, (error, { latitude, longitude, location }) => {
        if (error) {
            return console.log(error)
        }

        forecast(latitude, longitude, (error, forecastData) => {
            if (error) {
                return console.log(error)
            }

            console.log(location)
            console.log(forecastData)
        })
    })
}

in forecast.js=>

const request = require('request')

const forecast = (latitude, longitude, callback) => {
    const url = 'https://api.darksky.net/forecast/9d1465c6f3bb7a6c71944bdd8548d026/' + latitude + ',' + longitude

    request({ url, json: true }, (error, { body }) => {
        if (error) {
            callback('Unable to connect to weather service!', undefined)
        } else if (body.error) {
            callback('Unable to find location', undefined)
        } else {
            callback(undefined, body.daily.data[0].summary + ' It is currently ' + body.currently.temperature + ' degress out. There is a ' + body.currently.precipProbability + '% chance of rain.')
        }
    })
}

module.exports = forecast

in geocode.js:=>>

const request = require('request')

const geocode = (address, callback) => {
    const url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/' + address + '.json?access_token=pk.eyJ1IjoiYW5kcmV3bWVhZDEiLCJhIjoiY2pvOG8ybW90MDFhazNxcnJ4OTYydzJlOSJ9.njY7HvaalLEVhEOIghPTlw&limit=1'

    request({ url, json: true }, (error, { body }) => {
        if (error) {
            callback('Unable to connect to location services!', undefined)
        } else if (body.features.length === 0) {
            callback('Unable to find location. Try another search.', undefined)
        } else {
            callback(undefined, {
                latitude: body.features[0].center[1],
                longitude: body.features[0].center[0],
                location: body.features[0].place_name
            })
        }
    })
}

module.exports = geocodes


























































